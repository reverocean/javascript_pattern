// Generated by CoffeeScript 1.4.0
(function() {
  var Observer, ObserverList, Subject, extend, observerModule;

  Subject = function() {
    this.observers = new ObserverList();
  };

  Subject.prototype.AddObserver = function(observer) {
    return this.observers.Add(observer);
  };

  Subject.prototype.RemoveObserver = function(observer) {
    return this.observers.RemoveIndexAt(this.observers.IndexOf(observer));
  };

  Subject.prototype.Notify = function(context) {
    var index, _i, _ref, _results;
    _results = [];
    for (index = _i = 0, _ref = this.observers.Count(); 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.observers.Get(index).Update(context));
    }
    return _results;
  };

  Observer = function() {
    this.Update = function(context) {};
  };

  ObserverList = function() {
    this.observerList = [];
  };

  ObserverList.prototype.Add = function(obj) {
    return this.observerList.push(obj);
  };

  ObserverList.prototype.Empty = function() {
    return this.observerList = [];
  };

  ObserverList.prototype.Count = function() {
    return this.observerList.length;
  };

  ObserverList.prototype.Get = function(index) {
    if (index > -1 && index < this.observerList.length) {
      return this.observerList[index];
    }
  };

  ObserverList.prototype.Insert = function(obj, index) {
    var pointer;
    pointer = -1;
    if (index === 0) {
      this.observerList.unshift(obj);
      pointer = index;
    } else if (index === this.observerList.length) {
      this.observerList.push(obj);
      pointer = index;
    }
    return pointer;
  };

  ObserverList.prototype.IndexOf = function(obj, startIndex) {
    var index, observer, _i, _len, _ref;
    if (startIndex == null) {
      startIndex = 0;
    }
    _ref = this.observerList.slice(startIndex, this.observerList.length);
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      observer = _ref[index];
      if (obj === observer) {
        return index + startIndex;
      }
      return -1;
    }
  };

  ObserverList.prototype.RemoveAt = function(index) {
    if (index === 0) {
      return this.observerList.shift();
    } else if (index === this.observerList.length - 1) {
      return this.observerList.pop();
    }
  };

  extend = function(obj, extension) {
    var key, value;
    for (key in obj) {
      value = obj[key];
      extension[key] = value;
    }
  };

  observerModule = {
    'config': {
      controlCheckboxId: '#mainCheckbox',
      addBtnId: '#addNewObserver',
      containerId: '#observersContainer'
    },
    'init': function(config) {
      if (config && typeof config === 'object') {
        $.extend(observerModule.config, config);
      }
      observerModule.$controlCheckbox = $(observerModule.config.controlCheckboxId);
      observerModule.$addBtn = $(observerModule.config.addBtnId);
      observerModule.$container = $(observerModule.config.containerId);
      observerModule.initialized = true;
      extend(new Subject(), observerModule.$controlCheckbox);
      return observerModule.bind();
    },
    'bind': function() {
      observerModule.$controlCheckbox.click(observerModule.Notify);
      observerModule.$addBtn.click(observerModule.AddNewObserver);
    },
    'AddNewObserver': function() {
      var checkbox;
      checkbox = $('<input type="checkbox" />');
      extend(new Observer(), checkbox);
      checkbox.Update = function(value) {
        return $(this).attr("checked", value ? true : false);
      };
      observerModule.$controlCheckbox.AddObserver(checkbox);
      return observerModule.$container.append(checkbox);
    },
    'Notify': function() {
      return observerModule.$controlCheckbox.Notify($(this).attr("checked"));
    }
  };

  $(function() {
    return observerModule.init();
  });

}).call(this);
